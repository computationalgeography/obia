"""
Functions for plotting the figures. Each section corresponds to a single figure. Input for the figures is generated by
a function from the analyse_processing.py

"""

import os.path
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import seaborn as sns
import numpy as np

# 1


def figuur_opp_per_klasse_staaf(input_dataframe, klasse_subset_list,
                                save_plot=False, safe_fig_folder=None,
                                figure_name='Barplot_Opp'):
    """

    :param input_dataframe:
    :param klasse_subset_list:
    :param save_plot:
    :param safe_fig_folder:
    :param figure_name:
    :return:
    """
    sns.set(style='ticks',
            font_scale=0.7)
    g = sns.barplot(x=input_dataframe['index'],
                    y=input_dataframe['Opp_ha'],
                    hue=input_dataframe['Classificatie'],
                    palette=['#ffff4d', '#3399ff'],
                    order=klasse_subset_list)
    sns.despine()
    plt.ylim(0, 4500)
    plt.xticks(rotation=25, ha='right')
    plt.ylabel('Oppervlakte (ha)')
    plt.xlabel('Klassen')
    plt.tight_layout()
    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name+'.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        fig = g.get_figure()
        fig.savefig(fig_path)

# 2


def plot_error_matrix(input_dataframe, col_scale=(0, 100), added_columns=False,
                      save_plot=False, safe_fig_folder=None,
                      figure_name='ErrorMatrix_Oppervlakte'):
    """

    :param input_dataframe:
    :param col_scale:
    :param added_columns:
    :param save_plot:
    :param safe_fig_folder:
    :param figure_name:
    :return:
    """
    col_scale_min, col_scale_max = col_scale
    # plot
    sns.set(font_scale=0.85)
    f, ax = plt.subplots(figsize=(9, 4))
    g = sns.heatmap(input_dataframe,
                    annot=True,
                    fmt='.1f',
                    linewidths=.5,
                    ax=ax,
                    cmap="Greens",
                    cbar=False,
                    vmin=col_scale_min,
                    vmax=col_scale_max)
    ax.xaxis.set_ticks_position('top')
    plt.xticks(rotation=30, ha='left')
    plt.yticks(rotation=0)
    plt.tight_layout()

    if not added_columns:
        pass
    else:
        # ax.add_patch(Rectangle((3, 4), 1, 1, fill=False, edgecolor='blue', lw=3))
        ax.set(xlabel='Klasse RWS', ylabel='Klasse UU added context')
        columns = list(input_dataframe.columns)[:-4]
        n_columns = len(columns)
        ax.add_patch(Rectangle((0, 0), n_columns, n_columns, fill=False, edgecolor='grey', lw=1))

        row = 0
        column = 0
        for col in columns:
            ax.add_patch(Rectangle((column, row), 1, 1,
                         lw=1.5, fill=True, color='green', alpha=0.2))
            row += 1
            column += 1

        figure_name = "{}_{}".format(figure_name, 'adjusted')

    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name + '.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        fig = g.get_figure()
        fig.savefig(fig_path)

# 3 Histogram original objects


def plot_histogram_og_objects(input_dataframe, klasse_subset_list,
                              bin_min_max_n=(0.00001, 1500, 60),
                              save_plot=False, safe_fig_folder=None,
                              figure_name='Histogram_per_klasse_origineel'):
    # plot histograms
    sns.set()
    sns.set_style('ticks')
    sns.set_context('paper')

    b_min, b_max, b_n = bin_min_max_n
    bins_ = np.logspace(np.log10(b_min), np.log10(b_max), b_n)

    g = sns.FacetGrid(input_dataframe,
                      col='Klasse', col_order=klasse_subset_list,
                      row='Classificatie',
                      margin_titles=True,
                      height=2.5,
                      aspect=0.75)
    g.set(xscale='log')  # ,ylim=(0,80))

    g.map(plt.hist, 'Opp_ha', bins=bins_)
    # plt.setp(g.fig.texts, text="")
    for ax in g.axes.flat:
        plt.setp(ax.texts, text="")
        #    ax.set_xticks([0.01,1,10,100])
        formatter = plt.FuncFormatter(lambda x, _: '{:.16g}'.format(x))
        ax.xaxis.set_major_formatter(formatter)
    g.set_titles(col_template='{col_name}', row_template='{row_name}')
    plt.tight_layout()

    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name + '.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        g.savefig(fig_path)


def draw_histogram_line(bin_min_max_n, **kwargs):
    input_data = kwargs.pop('data')
    b_min, b_max, b_n = bin_min_max_n

    bins_ = np.logspace(np.log10(b_min), np.log10(b_max), b_n)
    total_ha = input_data['Opp_ha'].sum()
    n, bins, patches = plt.hist(input_data['Opp_ha'], bins=bins_,
                                cumulative=False, density=None,
                                alpha=0,
                                edgecolor='None')
    bin_centers = 0.5 * (bins[1:] + bins[:-1])
    new_list = [0]
    new_bin_list = []
    bin_tuple = zip(n, bin_centers)
    for n, b in bin_tuple:
        average_cum_value = (n * b) / total_ha * 100
        new_list_value = new_list[-1] + average_cum_value
        new_list.append(new_list_value)
        new_bin_list.append(b)
    new_list = new_list[1:]
    #    plt.plot(bin_centers,n,**kwargs)
    plt.plot(new_bin_list, new_list, **kwargs)


def plot_histogram_og_objects_cumulative(input_dataframe, klasse_subset_list,
                                         bin_min_max_n=(0.00001, 1500, 60),
                                         save_plot=False, safe_fig_folder=None,
                                         figure_name='Histogram_per_klasse_origineel'):
    # plot histograms
    g = sns.FacetGrid(input_dataframe,
                      col='Klasse', col_order=klasse_subset_list,
                      row='Classificatie',
                      margin_titles=True,
                      height=2.5,
                      aspect=0.75)

    g.set(xscale='log')  # ,xlim=(0.0001,51),ylim=(0,1.1))
    g.map_dataframe(draw_histogram_line, bin_min_max_n)
    for ax in g.axes.flat:
        plt.setp(ax.texts, text="")
        formatter = plt.FuncFormatter(lambda x, _: '{:.16g}'.format(x))
        ax.xaxis.set_major_formatter(formatter)
    g.set_titles(col_template='{col_name}', row_template='{row_name}')  # ,size=6.5)
    g.set_axis_labels('Opp_ha', 'fraction of total area')
    plt.tight_layout()

    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name + '.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        g.savefig(fig_path)

# 4 Histogram of objects per class transition

# =============================================================================
# #Draw cumulative line all objects norm scale no hist
# =============================================================================


def plot_histogram_transi_objects(input_dataframe, klasse_subset_list,
                                  classes,
                                  bin_min_max_n=(0.00001, 1500, 60),
                                  save_plot=False, safe_fig_folder=None,
                                  figure_name='Histogram_per_overgang_alle_objecten_opp'):
    class_uu, class_gmk = classes
    g = sns.FacetGrid(input_dataframe,
                      col=class_gmk, col_order=klasse_subset_list,
                      row=class_uu, row_order=klasse_subset_list,
                      margin_titles=True,
                      height=1.2,
                      aspect=1.2)

    b_min, b_max, b_n = bin_min_max_n
    bins_ = np.logspace(np.log10(b_min), np.log10(b_max), b_n)

    g.set(xscale='log') #, xlim=(0.0000000001, 51), ylim=(0, 1.1))
    g.map(plt.hist, 'Opp_ha', bins=bins_)
    for ax in g.axes.flat:
        plt.setp(ax.texts, text="")
        formatter = plt.FuncFormatter(lambda x, _: '{:.16g}'.format(x))
        ax.xaxis.set_major_formatter(formatter)
    g.set_titles(col_template='{col_name}', row_template='{row_name}', size=6.5)
    g.fig.subplots_adjust(wspace=.05, hspace=.25)
    g.set_axis_labels('Opp_ha', ' ')

    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name + '.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        g.savefig(fig_path)


def plot_histogram_transi_objects_cumulative(input_dataframe, klasse_subset_list,
                                             classes,
                                             bin_min_max_n=(0.00001, 1500, 60),
                                             save_plot=False, safe_fig_folder=None,
                                             figure_name='Histogram_per_overgang_alle_objecten_cumulatief_opp'):
    class_uu, class_gmk = classes
    g = sns.FacetGrid(input_dataframe,
                      col=class_gmk, col_order=klasse_subset_list,
                      row=class_uu, row_order=klasse_subset_list,
                      margin_titles=True,
                      height=1.2,
                      aspect=1.2)

    g.set(xscale='log') #, xlim=(0.0000000001, 51), ylim=(0, 1.1))
    g.map_dataframe(draw_histogram_line, bin_min_max_n)
    for ax in g.axes.flat:
        plt.setp(ax.texts, text="")
        formatter = plt.FuncFormatter(lambda x, _: '{:.16g}'.format(x))
        ax.xaxis.set_major_formatter(formatter)
    g.set_titles(col_template='{col_name}', row_template='{row_name}', size=6.5)
    g.fig.subplots_adjust(wspace=.05, hspace=.25)
    g.set_axis_labels('Opp_ha', ' ')

    # SAVEPLOT
    if not save_plot:
        return
    elif safe_fig_folder is None:
        print('No figure path selected. Please input a figure folder path')
    else:
        fig_name = figure_name + '.png'
        fig_path = os.path.join(safe_fig_folder, fig_name)
        g.savefig(fig_path)



